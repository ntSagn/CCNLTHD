import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import Board from "./Board";
import { easyAI, mediumAI, hardAI } from "../../utils/api"; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n import
import { checkWinner1 } from "../../utils/api"; // Th√™m h√†m checkWinner t·ª´ api

// H√†m check winner (n·∫øu kh√¥ng import ƒë∆∞·ª£c t·ª´ api)
const checkWinnerFunction = (board) => {
  const winPatterns = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8], // H√†ng ngang
    [0, 3, 6], [1, 4, 7], [2, 5, 8], // H√†ng d·ªçc
    [0, 4, 8], [2, 4, 6]             // ƒê∆∞·ªùng ch√©o
  ];

  for (const pattern of winPatterns) {
    const [a, b, c] = pattern;
    if (board[a] && board[a] === board[b] && board[a] === board[c]) {
      return board[a];
    }
  }
  return null;
};

// B·ªçc component Game b·∫±ng React.memo ƒë·ªÉ tr√°nh render l·∫°i kh√¥ng c·∫ßn thi·∫øt
const Game = React.memo(() => {
  const location = useLocation();
  const navigate = useNavigate(); // D√πng ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng

  // L·∫•y tham s·ªë t·ª´ query string (v√≠ d·ª•: ?mode=ai)
  const queryParams = useMemo(() => new URLSearchParams(location.search), [location.search]);
  const mode = useMemo(() => queryParams.get("mode") || "player", [queryParams]); // M·∫∑c ƒë·ªãnh l√† ch∆°i v·ªõi ng∆∞·ªùi

  // Khai b√°o c√°c state c·ªßa game
  const [board, setBoard] = useState(Array(9).fill(null)); // M·∫£ng tr·∫°ng th√°i b√†n c·ªù
  const [isXNext, setIsXNext] = useState(true);            // Theo d√µi l∆∞·ª£t ch∆°i
  const [winner, setWinner] = useState(null);              // Ng∆∞·ªùi chi·∫øn th·∫Øng
  const [isDraw, setIsDraw] = useState(false);             // Tr·∫°ng th√°i h√≤a
  const [difficulty, setDifficulty] = useState("Medium");  // M·ª©c ƒë·ªô AI (n·∫øu ch∆°i v·ªõi m√°y)

  // Khi b√†n c·ªù thay ƒë·ªïi, ki·ªÉm tra xem c√≥ ai th·∫Øng ch∆∞a
  useEffect(() => {
    // S·ª≠ d·ª•ng checkWinner t·ª´ import n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng h√†m local
    const winnerChecker = typeof checkWinner === 'function' ? checkWinner : checkWinnerFunction;
    const gameWinner = winnerChecker(board);
    if (gameWinner) {
      setWinner(gameWinner);
      alert(`üéâ Ch√∫c m·ª´ng! ${gameWinner} chi·∫øn th·∫Øng!`);
    } else if (!board.includes(null)) {
      setIsDraw(true);
      alert("ü§ù Tr·∫≠n ƒë·∫•u h√≤a!");
    }
  }, [board]);

  // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch∆°i v·ªõi m√°y, th√¨ ƒë·ªÉ AI ƒë√°nh khi ƒë·∫øn l∆∞·ª£t
  useEffect(() => {
    if (mode === "ai" && !isXNext && !winner && !isDraw) {
      const aiMoveTimeout = setTimeout(aiMove, 300); // Delay
      return () => clearTimeout(aiMoveTimeout); // Clear timeout n·∫øu component unmount
    }
  }, [board, isXNext, mode, winner, isDraw]);

  // X√°c ƒë·ªãnh n∆∞·ªõc ƒëi c·ªßa AI t√πy theo ƒë·ªô kh√≥
  const aiMove = useCallback(() => {
    let move;
    if (difficulty === "Easy") move = easyAI(board);
    else if (difficulty === "Medium") move = mediumAI(board);
    else move = hardAI(board);
    if (move !== null) handleClick(move);
  }, [board, difficulty]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i click v√†o √¥
  const handleClick = useCallback((index) => {
    if (board[index] || winner || isDraw) return; // Kh√¥ng l√†m g√¨ n·∫øu √¥ ƒë√£ ƒë√°nh ho·∫∑c game k·∫øt th√∫c
    const newBoard = [...board];
    newBoard[index] = isXNext ? "X" : "O";
    setBoard(newBoard);
    setIsXNext(!isXNext);
  }, [board, winner, isDraw, isXNext]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t ch∆°i l·∫°i
  const handleReset = useCallback(() => {
    setBoard(Array(9).fill(null));
    setIsXNext(true);
    setWinner(null);
    setIsDraw(false);
  }, []);

  // X·ª≠ l√Ω quay l·∫°i trang ch·ªß
  const handleGoHome = useCallback(() => {
    navigate("/tictactoe");
  }, [navigate]);

  // Tr·∫£ v·ªÅ giao di·ªán c·ªßa component
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-blue-50">
      <h1 className="text-4xl font-bold mb-6 text-gray-800">Tic-Tac-Toe</h1>
      <h2 className="text-lg mb-4 text-gray-700">
        {mode === "ai" ? "Ch·∫ø ƒë·ªô: Ch∆°i v·ªõi m√°y" : "Ch·∫ø ƒë·ªô: Ch∆°i v·ªõi b·∫°n"}
      </h2>

      {mode === "ai" && (
        <div className="mb-4">
          <label className="mr-2 font-semibold text-gray-700">Ch·ªçn ƒë·ªô kh√≥:</label>
          <select
            onChange={(e) => setDifficulty(e.target.value)}
            value={difficulty}
            className="border-2 border-gray-600 p-2 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          >
            <option value="Easy">D·ªÖ</option>
            <option value="Medium">Trung b√¨nh</option>
            <option value="Hard">Kh√≥</option>
          </select>
        </div>
      )}

      {/* Hi·ªÉn th·ªã b√†n c·ªù */}
      <Board board={board} onClick={handleClick} />

      {/* Hi·ªÉn th·ªã tr·∫°ng th√°i */}
      <h2 className="mt-4 text-2xl font-semibold text-gray-700">
        {winner
          ? `üéâ Winner: ${winner}`
          : isDraw
          ? "ü§ù Game Draw!"
          : `Next player: ${isXNext ? "X" : "O"}`}
      </h2>

      {/* N√∫t thao t√°c */}
      <div className="mt-6 flex gap-4">
        <button
          onClick={handleReset}
          className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition"
        >
          Restart
        </button>

        <button
          onClick={handleGoHome}
          className="bg-green-500 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition"
        >
          Quay l·∫°i Trang ch·ªß
        </button>
      </div>
    </div>
  );
});

export default Game;